function main(input) {
  let [N, ...masu] = input.trim().split("\n");
  N = Number(N);
  masu = masu.map(e => e.split("").map(Number));
  
  let answer = 0;
  const ym = [-1,-1,-1,0,0,1,1,1]; // 8マスのy移動
  const xm = [-1,0,1,-1,1,-1,0,1];　// 8マスのx移動
  
  // 全マス探索
  for(let i = 0; i < N; i++){
    for(let j = 0; j < N; j++){
      
      // ８マス移動
      for(let k = 0; k < 8; k++){
        let now = 0; // 現在値
        let y = i; // 現在位置：ここではスタートのyマス
        let x = j; // 現在位置：ここではスタートのxマス
        
        // N回同じ方向(k)に移動する　注：問題文をしっかり読むこと
        for(let l = 0; l < N; l++){
          now *= 10; // 前までの数字を繰上げ
          now += masu[x][y]; // 新しい数字(1~9)を足す
          
          x += xm[k]; // ８マス移動の1マスx移動後のx
          y += ym[k]; // ８マス移動の1マスy移動後のy
         
         // 一周している（要素の数を超えたもの）ものはmod Nすれば良い　ここで割っているのはlとかではなくN（勘違いしないように）
          y %= N; // もしN=4の場合 ４→0 ：　これにより一番下の配列が4の時(存在しない)に最初の要素　0を見るようになった　
          // 後ろに一周したもの（要素の数を超えてマイナスになったもの）はNの後ろから数えて-ということなのでN（長さ length）を足せば前から数えた位置がわかる
          y += N; // もしN=4の場合 -1→3 : これにより一番上の配列が-1の時（存在しない）に最後の要素 3を見るようになった　
          
          x %= N; // もしN=4の場合 ４→0 ：　これにより隣の要素が4の時(存在しない)に最初の要素　0を見るようになった　
          x += N; // もしN=4の場合 -1→3 : これにより隣の要素が-1の時（存在しない）に最後の要素 3を見るようになった　
          
          x %= N; // += Nで４以上になってしまったものを3以下にして下の数値に戻す
          y %= N;　// += Nで４以上になってしまったものを3以下にして下の数値に戻す
        }
        answer = Math.max(answer,now);
      }
    }
  }
  
  console.log(answer)
}

main(require("fs").readFileSync("/dev/stdin", "utf8")); 
